"cat >> ~/.vimrc.custom << 'EOF'

" Add long list of very custom vim options here

" Automatic view saving
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set viewoptions=cursor,folds,slash,unix

if !exists("g:autosave_view")
    let g:autosave_view = 0
endif

function! MakeViewCheck()
    " If we're not configured to autosave
    if g:autosave_view == 0 | return 0 | endif
    " if we're in diff mode
    if &l:diff | return 0 | endif
    " If we're not a file
    if &buftype != '' | return 0 | endif
    if expand('%') =~ '\[.*\]' | return 0 | endif
    " File does not exist on disk
    if empty(glob(expand('%:p'))) | return 0 | endif
    if &modifiable == 0 | return 0 | endif
    " If we're in the temp dir
    if len($TEMP) && expand('%:p:h') == $TEMP | return 0 | endif
    if len($TMP) && expand('%:p:h') == $TMP | return 0 | endif

    return 1
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Shortcut (\t): Set 4 char space tabs
"nmap \t :set expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
"Shortcut (\T): Set 8 char space tabs
"nmap \T :set expandtab tabstop=8 shiftwidth=8 softtabstop=8<CR>
"Shortcut (\m): Set 4 char tab tabs
"nmap \m :set noexpandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
"Shortcut (\M): Set 8 char tab tabs
"nmap \M :set noexpandtab tabstop=8 shiftwidth=8 softtabstop=8<CR>

" Shortcut (\woo): Toggle line wrapping at line limit
nmap \woo :call AutoWrapToggle()<CR>
function! AutoWrapToggle()
    if &formatoptions =~ 't'
        set fo-=t
    else
        set fo+=t
    endif
endfunction


" Can change MakeTags to anything you want
"command! MakeTags !ctags -R .

let t:is_transparent = 1
hi Normal guibg=NONE ctermbg=NONE
" Or just use this if you want it to start off in molokai
" let t:is_transparent = 0
function! Toggle_transparent_background()
  if t:is_transparent == 1
    :color molokai
    let t:is_transparent = 0
else
    hi Normal guibg=NONE ctermbg=NONE
    let t:is_transparent = 1
endif
endfunction
nnoremap <C-P> :call Toggle_transparent_background()<CR>

" remap for normal mode
nnoremap j h
nnoremap k j
nnoremap l k
nnoremap ; l

" remap for operator-pending mode
onoremap j h
onoremap k j
onoremap l k
onoremap ; l

" remap for visual select mode
xnoremap j h
xnoremap k j
xnoremap l k
xnoremap ; l

" remap for folding commands in normal mode
nnoremap zj zh
nnoremap zk zj
nnoremap zl zk
nnoremap z: zl

" Remap window traversal to match movement keys above
nnoremap <C-w>j <C-w>h
nnoremap <C-w>k <C-w>j
nnoremap <C-w>l <C-w>k
nnoremap <C-w>; <C-w>l

" Remap window movements to match movement keys above
nnoremap <C-w>J <C-w>H
nnoremap <C-w>K <C-w>J
nnoremap <C-w>L <C-w>K
nnoremap <C-w>: <C-w>L

" Remap tag movement
nnoremap <C-y> <C-]>
nnoremap <C-h> <C-o>
nnoremap <C-n> <C-i>
nnoremap <C-j> <C-t>


" Gutentags enables in specific ft files rather than for all files

" Cache tags in a common location (~/.cache/tags) to avoid re-scanning large projects repeatedly.
let g:gutentags_cache_dir = expand('~/.cache/vim/tags')

" Define the project root as the first folder upward containing a directory named "src".
" Gutentags will traverse upward from the file being edited until it finds a directory that matches the marker.
let g:gutentags_add_default_project_roots = 0
let g:gutentags_project_root = ['include', 'src']

" Always generate tags when a file is written and if tags are missing.
let g:gutentags_generate_on_new = 1
let g:gutentags_generate_on_write = 1
let g:gutentags_generate_on_missing = 1
let g:gutentags_generate_on_empty_buffer = 0

" (Optional) If you wish to refresh tags after saving, ensure the refresh is done immediately.
let g:gutentags_refresh_after_save = 1

" Setup for the following Explaining --fields=+ailmnS (info gathered from: $ ctags --list-fields)
" a: Access (or export) of class members
" i: Inheritance information
" l: Language of input file containing tag
" m: Implementation information
" n: Line number of tag definition
" S: Signature of routine (e.g. prototype or parameter list)
let g:gutentags_ctags_extra_args = [
      \ '--tag-relative=yes',
      \ '--fields=+ailmnS',
      \ ]

let g:gutentags_ctags_exclude = [
      \ '*.git', '*.svg', '*.hg',
      \ '*/tests/*',
      \ 'build',
      \ 'dist',
      \ '*sites/*/files/*',
      \ 'bin',
      \ 'node_modules',
      \ 'bower_components',
      \ 'cache',
      \ 'compiled',
      \ 'docs',
      \ 'example',
      \ 'bundle',
      \ 'vendor',
      \ '*.md',
      \ '*-lock.json',
      \ '*.lock',
      \ '*bundle*.js',
      \ '*build*.js',
      \ '.*rc*',
      \ '*.json',
      \ '*.min.*',
      \ '*.map',
      \ '*.bak',
      \ '*.zip',
      \ '*.pyc',
      \ '*.class',
      \ '*.sln',
      \ '*.Master',
      \ '*.csproj',
      \ '*.tmp',
      \ '*.csproj.user',
      \ '*.cache',
      \ '*.pdb',
      \ 'tags*',
      \ 'cscope.*',
      \ '*.css',
      \ '*.less',
      \ '*.scss',
      \ '*.exe', '*.dll',
      \ '*.mp3', '*.ogg', '*.flac',
      \ '*.swp', '*.swo',
      \ '*.bmp', '*.gif', '*.ico', '*.jpg', '*.png',
      \ '*.rar', '*.zip', '*.tar', '*.tar.gz', '*.tar.xz', '*.tar.bz2',
      \ '*.pdf', '*.doc', '*.docx', '*.ppt', '*.pptx',
      \ ]

command! -nargs=0 GutentagsClearCache call system('rm ' . g:gutentags_cache_dir . '/*')

" Get the directory of the current .vimrc.custom file
let vimrc_dir = expand('<sfile>:p:h')

" Construct the path relative to the .vimrc.custom file
let cscope_file = vimrc_dir . '/.vim/cscope/cscope_maps.vim'

" Resolve in case it is a symbolic link
let resolved_cscope_file = resolve(cscope_file)

if filereadable(resolved_cscope_file)
    execute 'source ' . resolved_cscope_file
endif

"EOF
